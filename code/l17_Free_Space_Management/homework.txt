vm-freespace

1.
./malloc.py  -n 10 -H 0 -p BEST -s 0

seed 0
size 100
baseAddr 1000
headerSize 0
alignment -1
policy BEST
listOrder ADDRSORT
coalesce False
numOps 10
range 10
percentAlloc 50
allocList
compute False

ptr[0] = Alloc(3) returned 1000
Free List [ Size 1 ]:  [ addr:1003 sz:97 ]

Free(ptr[0])
returned 0
Free List [ Size 2 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:97 ]

ptr[1] = Alloc(5) returned 1003
Free List [ Size 2 ]:  [ addr:1000 sz:3 ] [ addr:1008 sz:92 ]

Free(ptr[1])
returned 0
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:92 ]

ptr[2] = Alloc(8) returned 1008
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1016 sz:84 ]

Free(ptr[2])
returned 0
Free List [ Size 4 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[3] = Alloc(8) returned 1008
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1016 sz:84 ]

Free(ptr[3])
returned 0
Free List [ Size 4 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[4] = Alloc(2) returned 1000
Free List [ Size 4 ]:  [ addr:1002 sz:1 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[5] = Alloc(7) returned 1008
Free List [ Size 4 ]:  [ addr:1002 sz:1 ] [ addr:1003 sz:5 ] [ addr:1015 sz:1 ] [ addr:1016 sz:84 ]

生成大量的结点, 结点之间存在大量的外部碎片

2.
./malloc.py  -n 10 -H 0 -p WORST -s 0

seed 0
size 100
baseAddr 1000
headerSize 0
alignment -1
policy WORST
listOrder ADDRSORT
coalesce False
numOps 10
range 10
percentAlloc 50
allocList
compute False

ptr[0] = Alloc(3) returned 1000
Free List [ Size 1 ]:  [ addr:1003 sz:97 ]

Free(ptr[0])
returned 0
Free List [ Size 2 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:97 ]

ptr[1] = Alloc(5) returned 1003
Free List [ Size 2 ]:  [ addr:1000 sz:3 ] [ addr:1008 sz:92 ]

Free(ptr[1])
returned 0
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:92 ]

ptr[2] = Alloc(8) returned 1008
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1016 sz:84 ]

Free(ptr[2])
returned 0
Free List [ Size 4 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[3] = Alloc(8) returned 1016
Free List [ Size 4 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1024 sz:76 ]

Free(ptr[3])
returned 0
Free List [ Size 5 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:8 ] [ addr:1024 sz:76 ]

ptr[4] = Alloc(2) returned 1000
Free List [ Size 5 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:8 ] [ addr:1026 sz:74 ]

ptr[5] = Alloc(7) returned 1008
Free List [ Size 5 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:8 ] [ addr:1033 sz:67 ]

几乎只向位于列表最后的, 最大的空闲块申请内存

3.
./malloc.py  -n 10 -H 0 -p FIRST -s 0

seed 0
size 100
baseAddr 1000
headerSize 0
alignment -1
policy FIRST
listOrder ADDRSORT
coalesce False
numOps 10
range 10
percentAlloc 50
allocList
compute False

ptr[0] = Alloc(3) returned 1000
Free List [ Size 1 ]:  [ addr:1003 sz:97 ]

Free(ptr[0])
returned 0
Free List [ Size 2 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:97 ]

ptr[1] = Alloc(5) returned 1003
Free List [ Size 2 ]:  [ addr:1000 sz:3 ] [ addr:1008 sz:92 ]

Free(ptr[1])
returned 0
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:92 ]

ptr[2] = Alloc(8) returned 1008
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1016 sz:84 ]

Free(ptr[2])
returned 0
Free List [ Size 4 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[3] = Alloc(8) returned 1008
Free List [ Size 3 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1016 sz:84 ]

Free(ptr[3])
returned 0
Free List [ Size 4 ]:  [ addr:1000 sz:3 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[4] = Alloc(2) returned 1000
Free List [ Size 4 ]:  [ addr:1002 sz:1 ] [ addr:1003 sz:5 ] [ addr:1008 sz:8 ] [ addr:1016 sz:84 ]

ptr[5] = Alloc(7) returned 1008
Free List [ Size 4 ]:  [ addr:1002 sz:1 ] [ addr:1003 sz:5 ] [ addr:1015 sz:1 ] [ addr:1016 sz:84 ]

与 BEST 的情况类似, 因为第一个合适的内存块都恰好是最小的

查找合适内存块的速度变快了, BEST 每回都需要查找和列表大小相同的次数, 但 FIRST 不需要

4.
使用 -l SIZESORT+ 将使 FIRST 变慢, 此时 FIRST 类似于 BEST
使用 -l SIZESORT- 将使 FIRST 变快, 此时 FIRST 类似于 WORST

BEST 和 WORST 的速度不会受到影响, 因为它们即使列表排序也会查找整个列表

5.
./malloc.py  -n 1000 -H 0 -p BEST -s 0
./malloc.py  -n 1000 -H 0 -p BEST -s 0 -C

如果不进行合并, 随着时间的推移, 大型分配请求将总是失败, 因为内存被分割为大量的小块
进行合并后, 进行大量的分配与释放操作, FREE LIST 仍然保持较小的规模

不进行合并, 最后 Free List 大小为 31, 而进行合并后, 最后 Free List 大小为 1

这时列表是否排序不重要

6.
./malloc.py  -n 10 -H 0 -p BEST -P 50 -s 0
./malloc.py  -n 10 -H 0 -p BEST -P 1 -s 0
./malloc.py  -n 10 -H 0 -p BEST -P 99 -s 0

-P 为 50 时, 分配得到的内存几乎全部被释放, 但是 FREE LIST 仍然保持较大的规模
-P 为 1 时, 与 50 的情况类似, 因为每个 free 操作前必须有一个 malloc, 分配得到的内存几乎全部被释放, 但是 FREE LIST 仍然保持较大的规模
-P 为 99 时, 几乎总是进行分配操作, 空闲内存快速减少, 但是 FREE LIST 保持较小的规模

7.
分配大量的小空间, 随后只释放奇数次分配的内存块, 这样即使允许合并仍然将产生大量的外部碎片
./malloc.py -H 0 -p BEST  -C -A +1,+2,+3,+4,+5,+4,+3,+2,+1,-1,-3,-5,-7,-9
