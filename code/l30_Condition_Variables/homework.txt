threads-cv

1.

same as chapter 30

producer

```c
for (i = 0; i < loops; i++) {       p0;
        Mutex_lock(&m);             p1;
        while (num_full == max) {   p2;
            Cond_wait(&empty, &m);  p3;
        }
        do_fill(i);                 p4;
        Cond_signal(&fill);         p5;
        Mutex_unlock(&m);           p6;
    }
```

consumer

```c
while (tmp != END_OF_STREAM) { c0;
    Mutex_lock(&m);            c1;
    while (num_full == 0) {    c2;
        Cond_wait(&fill, &m);  c3;
        }
    tmp = do_get();            c4;
    Cond_signal(&empty);       c5;
    Mutex_unlock(&m);          c6;
    consumed_count++;
    }
```

2.

$ ./main-two-cvs-while -l 2 -m 1 -p 1 -c 1 -v
 NF        P0 C0
  0 [*--- ] p0
  0 [*--- ]    c0
  0 [*--- ] p1
  1 [*  0 ] p4
  1 [*  0 ] p5
  1 [*  0 ] p6
  1 [*  0 ]    c1
  1 [*  0 ] p0
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  0 [*--- ] p1
  0 [*--- ]    c0
  1 [*  1 ] p4
  1 [*  1 ] p5
  1 [*  1 ] p6
  1 [*  1 ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6
  1 [*EOS ] [main: added end-of-stream marker]
  1 [*EOS ]    c0
  1 [*EOS ]    c1
  0 [*--- ]    c4
  0 [*--- ]    c5
  0 [*--- ]    c6

Consumer consumption:
  C0 -> 2

$ ./main-two-cvs-while -l 2 -m 2 -p 1 -c 1 -v
 NF             P0 C0
  0 [*---  --- ] p0
  0 [*---  --- ]    c0
  0 [*---  --- ] p1
  1 [u  0 f--- ] p4
  1 [u  0 f--- ] p5
  1 [u  0 f--- ] p6
  1 [u  0 f--- ]    c1
  1 [u  0 f--- ] p0
  0 [ --- *--- ]    c4
  0 [ --- *--- ]    c5
  0 [ --- *--- ]    c6
  0 [ --- *--- ] p1
  0 [ --- *--- ]    c0
  1 [f--- u  1 ] p4
  1 [f--- u  1 ] p5
  1 [f--- u  1 ] p6
  1 [f--- u  1 ]    c1
  0 [*---  --- ]    c4
  0 [*---  --- ]    c5
  0 [*---  --- ]    c6
  1 [uEOS f--- ] [main: added end-of-stream marker]
  1 [uEOS f--- ]    c0
  1 [uEOS f--- ]    c1
  0 [ --- *--- ]    c4
  0 [ --- *--- ]    c5
  0 [ --- *--- ]    c6

由于每次都是生产者生产后消费者立即读取, 所以程序运行的情况大致相同

$ ./main-two-cvs-while -l 2 -m 4 -p 1 -c 1 -C 0,0,0,0,0,0,1 -v

改变后生产者迅速填满缓冲区, 随后消费者一旦读取一个值生产者就生产一个值填入, 所以 NF 长期在 9 和 10 之间徘徊

3.

pass

4.

$ ./main-two-cvs-while -p 1 -c 3 -m 1 -C 0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 -l 10 -v -t

消费者每读取一个都需要 1 秒, 其余时间可忽略不计, 故总计 10 秒 (读取完成后其余的进程进入并各自进行 1 次休眠, 故总计 12 秒)

5.

$ ./main-two-cvs-while -p 1 -c 3 -m 3 -C 0,0,0,1,0,0,0:0,0,0,1,0,0,0:0,0,0,1,0,0,0 -l 10 -v -t

应当差别不大 (最终所有消费者都进行一次休眠, 故总计 13 秒)

6.

$ ./main-two-cvs-while -p 1 -c 3 -m 1 -C 0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 -l 10 -v -t

这相当于生产者很快地生产 1 个值, 随后被一个进程读取, 重复 3 次, 这次生产者产生的值在 1s 后被读取, 又是连续三次, 最终的 1 次被读取后读取进程的处理花费 1s, 最终这个读取的消费者又要花费 1s 等待未获取值的情况, 故总计 3 * 1 + 1 + 1 = 5s

7.

$ ./main-two-cvs-while -p 1 -c 3 -m 3 -C 0,0,0,0,0,0,1:0,0,0,0,0,0,1:0,0,0,0,0,0,1 -l 10 -v -t

应当差别不大

8.

$ ./main-one-cv-while -p 1 -c 1 -m 1 -l 1 -v -t

在一个生产者和一个消费者的情况下, 这段代码应当正常运行

9.

$ ./main-one-cv-while -p 1 -c 2 -m 1 -l 4 -P 2 -C 0,0,0,2:1 -v -t

超了, 不会

10.

在一个生产者和一个消费者的情况下, 这段代码应当正常运行

两个消费者情况下:

超了, 不会

11.

可能会导致多个消费者同时消费, 使消费者的 `do_get` 延长可导致问题发生
